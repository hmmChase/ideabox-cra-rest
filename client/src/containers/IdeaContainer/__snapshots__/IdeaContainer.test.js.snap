// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`IdeaContainer matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <IdeaContainer
    dispatchGetIdeas={[MockFunction]}
    stateHasErrored={false}
    stateIdeas={
      Array [
        Object {
          "id": 1,
          "idea": "mock idea",
        },
        Object {
          "id": 2,
          "idea": "mock idea",
        },
      ]
    }
    stateIsLoading={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <ul>
        <Connect(IdeaCard)
          id={2}
          idea="mock idea"
        />
        <Connect(IdeaCard)
          id={1}
          idea="mock idea"
        />
      </ul>,
      "className": "IdeaContainer",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Connect(IdeaCard)
            id={2}
            idea="mock idea"
          />,
          <Connect(IdeaCard)
            id={1}
            idea="mock idea"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "ideaCard2",
          "nodeType": "class",
          "props": Object {
            "id": 2,
            "idea": "mock idea",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "ideaCard1",
          "nodeType": "class",
          "props": Object {
            "id": 1,
            "idea": "mock idea",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "ul",
    },
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <ul>
          <Connect(IdeaCard)
            id={2}
            idea="mock idea"
          />
          <Connect(IdeaCard)
            id={1}
            idea="mock idea"
          />
        </ul>,
        "className": "IdeaContainer",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Connect(IdeaCard)
              id={2}
              idea="mock idea"
            />,
            <Connect(IdeaCard)
              id={1}
              idea="mock idea"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "ideaCard2",
            "nodeType": "class",
            "props": Object {
              "id": 2,
              "idea": "mock idea",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "ideaCard1",
            "nodeType": "class",
            "props": Object {
              "id": 1,
              "idea": "mock idea",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "ul",
      },
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;

exports[`IdeaContainer matches the snapshot with props.stateHasErrored: true 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <IdeaContainer
    dispatchGetIdeas={[MockFunction]}
    stateHasErrored={true}
    stateIdeas={
      Array [
        Object {
          "id": 1,
          "idea": "mock idea",
        },
        Object {
          "id": 2,
          "idea": "mock idea",
        },
      ]
    }
    stateIsLoading={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Error />,
      "className": "IdeaContainer",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Error />,
        "className": "IdeaContainer",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;

exports[`IdeaContainer matches the snapshot with props.stateisLoading: true 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <IdeaContainer
    dispatchGetIdeas={[MockFunction]}
    stateHasErrored={false}
    stateIdeas={
      Array [
        Object {
          "id": 1,
          "idea": "mock idea",
        },
        Object {
          "id": 2,
          "idea": "mock idea",
        },
      ]
    }
    stateIsLoading={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Loader />,
      "className": "IdeaContainer",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Loader />,
        "className": "IdeaContainer",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
